CONSTRUCTOR & DESTRUCTOR:
.Constructors and destructors are special member functions of a class that are used to initialize and clean up the objects of the class, respectively. 
.Constructors are called when an object of the class is created, and destructors are called when the object is destroyed.

TYPES:
 1.Default-with no arguments
 2.copy-initialize and object with the another object of same class type.
 3.Parameterized-with parameters

NOTE:We can define constructors or functions outside of the class with the help of scope resolution operator(::).
----------------------------------------------------------------------------------------------------------------------------------------

                                                                  CONSTRUCTOR
#include <iostream>  
using namespace std;  
class Employee  
 {  
   public: 
   int id;
   string name;
   Employee()
   {
       id=0;
       name="Unknow";
   }
   Employee(int id,string name)
   {
       this->id=id;
       this->name=name;
   }
   Employee(const Employee &o);
}; 
Employee::Employee(const Employee &o)
{
    id=o.id;
    name=o.name;
}


int main()   
{  
    Employee e1; //creating an object of Employee
    Employee e2(920,"Siva");   
    Employee e3=e2; // Employee e3(e2); copy construtor call in 2 ways
    cout<<e1.name<<"->"<<e1.id<<endl;
    cout<<e2.name<<"->"<<e2.id<<endl;
    cout<<e3.name<<"->"<<e3.id<<endl;
    
    
    return 0;  
}




-----------------------------------------------------------------------------------------------------------------

                                                               //DESTRUCTOR


.Destructor is called automaticaaly when object goes out of the scope.
.Destructor doesnt take arguments.
.Destructors cannot be overloaded.





#include<iostream>
using namespace std;
class Base
{
    public:
    Base()
    {
        cout<<"Base Constructor is called"<<endl;
    }
    ~Base()
    {
        cout<<" Base Destructor is called"<<endl;
    }
};
class Derived:public Base
{
    public:
    Derived()
    {
        cout<<"Derived Constructor is called"<<endl;
    }
    ~Derived()
    {
        cout<<" Derived Destructor is called"<<endl;
    }
};
int main()
{
    Base b;
    
    return 0;
}




#include<iostream>
using namespace std;
class Base
{
    public:
    Base()
    {
        cout<<"Base Constructor is called"<<endl;
    }
    ~Base()
    {
        cout<<" Base Destructor is called"<<endl;
    }
};
class Derived:public Base
{
    public:
    Derived()
    {
        cout<<"Derived Constructor is called"<<endl;
    }
    ~Derived()
    {
        cout<<" Derived Destructor is called"<<endl;
    }
};
int main()
{
    Derived d;
    
    return 0;
}







#include<iostream>
using namespace std;
class A
{
    public:
    A()
    {
        cout<<"Constructor is called"<<endl;
    }
    ~A()
    {
        cout<<"Destructor is called"<<endl;
    }
};
void fun()
{
    A obj;
}
int main()
{
    A obj;
    fun();
    cout<<"Back to int main fun:"<<endl;
    
    return 0;
}





#include <iostream>  
using namespace std;  
class Employee  
 {  
   public: 
   int id;
   string name;
        Employee(int id,string name)
        {   this->id=id;
           this->name=name;
            
        }
        ~Employee()
        {
            cout<<"Memory destroy"<<endl;
        }
            
}; 


int main()   
{  
    Employee e1(920,"Siva"); //creating an object of Employee   
    cout<<e1.name<<"->"<<e1.id<<endl;
    
    return 0;  
}
